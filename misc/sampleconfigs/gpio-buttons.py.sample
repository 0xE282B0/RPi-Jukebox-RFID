#!/usr/bin/python3
import RPi.GPIO as GPIO
from signal import pause
from subprocess import check_call
import time

# This script will block any I2S DAC e.g. from Hifiberry, Justboom, ES9023, PCM5102A
# due to the assignment of GPIO 19 and 21 to a buttons

# 2018-10-31
# Added the function on holding volume + - buttons to change the volume in 0.3s interval
#
# 2018-10-15
# this script has the `pull_up=True` for all pins. See the following link for additional info: 
# https://github.com/MiczFlor/RPi-Jukebox-RFID/issues/259#issuecomment-430007446
#
# 2017-12-12
# This script was copied from the following RPi forum post:
# https://forum-raspberrypi.de/forum/thread/13144-projekt-jukebox4kids-jukebox-fuer-kinder/?postID=312257#post312257
# I have not yet had the time to test is, so I placed it in the misc folder.
# If anybody has ideas or tests or experience regarding this solution, please create pull requests or contact me.


# function to provide user feedback (= flashing led) while the shutdown button is pressed
# do not directly call shutdown, in case it was hit accedently
# shutdown is only issued when the button remains pressed for all interations of the for loop
def shutdown():
    status = False
    for x in range(0, 10):
        GPIO.output(pled, x & 1)
        time.sleep(.2)
        status = GPIO.input(pled)
        if status:
            break

    GPIO.output(pled, status)
    if not status:
        # trippel off period to indicate command accepted
        time.sleep(.6)
        GPIO.output(pled, GPIO.HIGH)
        # leave it on for the moment, it will be off when the system is down
        def_shutdown()

def def_shutdown():
    check_call("./scripts/playout_controls.sh -c=shutdown", shell=True)

def def_volU():
    check_call("./scripts/playout_controls.sh -c=volumeup", shell=True)

def def_volD():
    check_call("./scripts/playout_controls.sh -c=volumedown", shell=True)

def def_vol0():
    check_call("./scripts/playout_controls.sh -c=mute", shell=True)

def def_next():
    check_call("./scripts/playout_controls.sh -c=playernext", shell=True)

def def_prev():
    check_call("./scripts/playout_controls.sh -c=playerprev", shell=True)

def def_halt():
    check_call("./scripts/playout_controls.sh -c=playerpause", shell=True)

def def_recordstart():
    check_call("./scripts/playout_controls.sh -c=recordstart", shell=True)

def def_recordstop():
    check_call("./scripts/playout_controls.sh -c=recordstop", shell=True)

def def_recordplaylatest():
    check_call("./scripts/playout_controls.sh -c=recordplaylatest", shell=True)

shut = 3
pled = 7
vol0 = 13
volU = 16
volD = 19
next = 26
prev = 20
halt = 21
#reco =
#play =

GPIO.setmode(GPIO.BCM)
bouncetime = 500

GPIO.setup(shut, GPIO.IN, pull_up_down=GPIO.PUD_UP)
# GPIO 7 - Pin 26
GPIO.setup(7, GPIO.OUT)

GPIO.setup(vol0, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(volU, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(volD, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(next, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(prev, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(halt, GPIO.IN, pull_up_down=GPIO.PUD_UP)

GPIO.add_event_detect(shut, GPIO.FALLING, callback=shutdown, bouncetime=bouncetime)
GPIO.add_event_detect(vol0, GPIO.FALLING, callback=def_vol0, bouncetime=bouncetime)
GPIO.add_event_detect(volU, GPIO.FALLING, callback=def_volU, bouncetime=bouncetime)
#When the Volume Up button was held for more than 0.3 seconds every 0.3 seconds he will call a ra$
# TODO: 0.3s hold!
GPIO.add_event_detect(volU, GPIO.FALLING, callback=def_volU, bouncetime=bouncetime)
# TODO: 0.3s hold!
GPIO.add_event_detect(volD, GPIO.FALLING, callback=def_volD, bouncetime=bouncetime)
#When the Volume Down button was held for more than 0.3 seconds every 0.3 seconds he will lower t$
GPIO.add_event_detect(next, GPIO.FALLING, callback=def_next, bouncetime=bouncetime)
GPIO.add_event_detect(prev, GPIO.FALLING, callback=def_prev, bouncetime=bouncetime)
GPIO.add_event_detect(halt, GPIO.FALLING, callback=def_halt, bouncetime=bouncetime)
#reco.when_pressed = def_recordstart
#reco.when_released = def_recordstop
#play.when_pressed = def_recordplaylatest

# Switch on power led after boot to indicate state "on" for phoniebox
GPIO.output(LEDGPIO, GPIO.HIGH)

pause()
